// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetAPIReportParams creates a new GetAPIReportParams object
//
// There are no default values defined in the spec.
func NewGetAPIReportParams() GetAPIReportParams {

	return GetAPIReportParams{}
}

// GetAPIReportParams contains all the bound params for the get API report operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetAPIReport
type GetAPIReportParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Recorded stats from a given date. Default is today minus 1 year.
	  In: query
	*/
	DateFrom *strfmt.DateTime
	/*Recorded stats to given date. Default is today.
	  In: query
	*/
	DateTo *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAPIReportParams() beforehand.
func (o *GetAPIReportParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDateFrom, qhkDateFrom, _ := qs.GetOK("dateFrom")
	if err := o.bindDateFrom(qDateFrom, qhkDateFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateTo, qhkDateTo, _ := qs.GetOK("dateTo")
	if err := o.bindDateTo(qDateTo, qhkDateTo, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDateFrom binds and validates parameter DateFrom from query.
func (o *GetAPIReportParams) bindDateFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("dateFrom", "query", "strfmt.DateTime", raw)
	}
	o.DateFrom = (value.(*strfmt.DateTime))

	if err := o.validateDateFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateDateFrom carries on validations for parameter DateFrom
func (o *GetAPIReportParams) validateDateFrom(formats strfmt.Registry) error {

	if err := validate.FormatOf("dateFrom", "query", "date-time", o.DateFrom.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindDateTo binds and validates parameter DateTo from query.
func (o *GetAPIReportParams) bindDateTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("dateTo", "query", "strfmt.DateTime", raw)
	}
	o.DateTo = (value.(*strfmt.DateTime))

	if err := o.validateDateTo(formats); err != nil {
		return err
	}

	return nil
}

// validateDateTo carries on validations for parameter DateTo
func (o *GetAPIReportParams) validateDateTo(formats strfmt.Registry) error {

	if err := validate.FormatOf("dateTo", "query", "date-time", o.DateTo.String(), formats); err != nil {
		return err
	}
	return nil
}
