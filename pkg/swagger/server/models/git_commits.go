// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitCommits git commits
//
// swagger:model GitCommits
type GitCommits struct {

	// contributions
	Contributions *GitAuthorContributions `json:"contributions,omitempty"`

	// count
	Count int64 `json:"count,omitempty"`

	// datetime
	// Format: date-time
	Datetime strfmt.DateTime `json:"datetime,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this git commits
func (m *GitCommits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContributions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitCommits) validateContributions(formats strfmt.Registry) error {
	if swag.IsZero(m.Contributions) { // not required
		return nil
	}

	if m.Contributions != nil {
		if err := m.Contributions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contributions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contributions")
			}
			return err
		}
	}

	return nil
}

func (m *GitCommits) validateDatetime(formats strfmt.Registry) error {
	if swag.IsZero(m.Datetime) { // not required
		return nil
	}

	if err := validate.FormatOf("datetime", "body", "date-time", m.Datetime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this git commits based on the context it is used
func (m *GitCommits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContributions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitCommits) contextValidateContributions(ctx context.Context, formats strfmt.Registry) error {

	if m.Contributions != nil {
		if err := m.Contributions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contributions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contributions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitCommits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitCommits) UnmarshalBinary(b []byte) error {
	var res GitCommits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
